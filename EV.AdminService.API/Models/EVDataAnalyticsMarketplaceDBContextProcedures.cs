// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using EV.AdminService.API.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace EV.AdminService.API.Models
{
    public partial class EVDataAnalyticsMarketplaceDBContext
    {
        private IEVDataAnalyticsMarketplaceDBContextProcedures _procedures;

        public virtual IEVDataAnalyticsMarketplaceDBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new EVDataAnalyticsMarketplaceDBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IEVDataAnalyticsMarketplaceDBContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class EVDataAnalyticsMarketplaceDBContextProcedures : IEVDataAnalyticsMarketplaceDBContextProcedures
    {
        private readonly EVDataAnalyticsMarketplaceDBContext _context;

        public EVDataAnalyticsMarketplaceDBContextProcedures(EVDataAnalyticsMarketplaceDBContext context)
        {
            _context = context;
        }

        public virtual async Task<int> usp_DistributePaymentAsync(Guid? paymentId, Guid? providerOrgId, decimal? marketplacePercentage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaymentId",
                    Value = paymentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "ProviderOrgId",
                    Value = providerOrgId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "MarketplacePercentage",
                    Precision = 5,
                    Scale = 2,
                    Value = marketplacePercentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[usp_DistributePayment] @PaymentId = @PaymentId, @ProviderOrgId = @ProviderOrgId, @MarketplacePercentage = @MarketplacePercentage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> usp_PurchaseDatasetAsync(Guid? buyerUserId, Guid? buyerOrgId, Guid? datasetVersionId, decimal? price, string currency, int? accessDays, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BuyerUserId",
                    Value = buyerUserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "BuyerOrgId",
                    Value = buyerOrgId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "DatasetVersionId",
                    Value = datasetVersionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "Price",
                    Precision = 18,
                    Scale = 4,
                    Value = price ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Currency",
                    Size = 20,
                    Value = currency ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccessDays",
                    Value = accessDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[usp_PurchaseDataset] @BuyerUserId = @BuyerUserId, @BuyerOrgId = @BuyerOrgId, @DatasetVersionId = @DatasetVersionId, @Price = @Price, @Currency = @Currency, @AccessDays = @AccessDays", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_SearchDatasetsResult>> usp_SearchDatasetsAsync(string q, string category, string region, string vehicleType, decimal? minPrice, decimal? maxPrice, int? page, int? pageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "q",
                    Size = 8000,
                    Value = q ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "category",
                    Size = 200,
                    Value = category ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "region",
                    Size = 400,
                    Value = region ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleType",
                    Size = 200,
                    Value = vehicleType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "minPrice",
                    Precision = 18,
                    Scale = 4,
                    Value = minPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "maxPrice",
                    Precision = 18,
                    Scale = 4,
                    Value = maxPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "page",
                    Value = page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_SearchDatasetsResult>("EXEC @returnValue = [dbo].[usp_SearchDatasets] @q = @q, @category = @category, @region = @region, @vehicleType = @vehicleType, @minPrice = @minPrice, @maxPrice = @maxPrice, @page = @page, @pageSize = @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
